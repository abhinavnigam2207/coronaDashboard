{"version":3,"sources":["components/header/index.js","components/commons/loader/index.js","components/overview/index.js","components/countryView/countryTable.js","components/countryView/service.js","components/countryView/index.js","App.js","serviceWorker.js","index.js"],"names":["headerCSS","css","spin","keyframes","loaderCSS","container","item","useState","overview","setOverview","useEffect","a","fetch","resp","json","response","getOverview","cases","Fragment","deaths","recovered","TH","styled","th","TD","td","bgGrey","bold","textCenter","tableCSS","flag","countriesData","selection","src","countryInfo","todayCases","todayDeaths","active","getGraphData","Object","entries","forEach","key","i","push","label","data","p4","marginAuto","chartContainer","pieContainer","customStyles","provided","width","option","textAlign","value","selectedOption","setSelectedOption","countryOptions","setCountryOptions","setCountriesData","historicalData","setHistoricalData","series","React","useMemo","showPoints","axes","primary","type","position","getHistoricalData","country","historyData","timeline","countryData","countries","map","getCountries","keys","length","styles","onChange","options","tooltip","labelStyle","fill","fontSize","labelPosition","animate","background","animationDuration","title","color","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efd28b31.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport '../../App.css';\r\n\r\nconst headerCSS = css`\r\n    background-color: #282c34;\r\n    color: #61dafb;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 18px;\r\n    padding: 5px 10px;\r\n`;\r\n\r\nexport default () => {\r\n  return (<header css={headerCSS}> Corona Dashboard </header>);\r\n};\r\n","/** @jsx jsx */\r\nimport { jsx, css, keyframes } from '@emotion/core'\r\n\r\nconst spin = keyframes`\r\n    from, 0%, to { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n`\r\nconst loaderCSS = css`\r\n    border: 8px solid #f3f3f3;\r\n    border-radius: 50%;\r\n    border-top: 8px solid #3498db;\r\n    width: 30px;\r\n    height: 30px;\r\n    -webkit-animation: ${spin} 1s linear infinite;\r\n    animation: ${spin} 1s linear infinite;\r\n    margin: 0 auto;\r\n`;\r\n\r\n\r\nexport default () => (<div css={loaderCSS}></div>)","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport React, { useState, useEffect } from 'react';\r\nimport Loader from '../commons/loader';\r\n\r\nconst container = css`\r\n    padding: 20px 30px;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst item = css`\r\n    background: grey;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 5%;\r\n    font-size: 14px;\r\n    margin: 2%;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport default () => {\r\n    const [overview, setOverview] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function getOverview() {\r\n            const resp = await fetch('https://corona.lmao.ninja/all');\r\n            const response = await resp.json();\r\n            setOverview(response);\r\n        }\r\n        getOverview()\r\n      }, []);\r\n\r\n    return (\r\n        <div css={container}>\r\n            <div css={item}>\r\n                {overview && overview.cases\r\n                    ? (<React.Fragment>\r\n                            <div>Confirmed</div> \r\n                            <div>{overview.cases}</div>\r\n                        </React.Fragment>)\r\n                    : <Loader />}\r\n            </div>\r\n            <div css={item}>\r\n                {overview && overview.deaths\r\n                    ? (<React.Fragment>\r\n                            <div>Deaths</div> \r\n                            <div>{overview.deaths}</div>\r\n                        </React.Fragment>)\r\n                    : <Loader />}\r\n            </div>\r\n            <div css={item}>\r\n                {overview && overview.recovered\r\n                    ? (<React.Fragment>\r\n                            <div>Recovered</div> \r\n                            <div>{overview.recovered}</div>\r\n                        </React.Fragment>)\r\n                    : <Loader />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport styled from '@emotion/styled'\r\n\r\nconst TH = styled.th`\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n`;\r\nconst TD = styled.td`\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n`;\r\nconst bgGrey = css`background-color: #dddddd;`;\r\nconst bold = css`font-weight: 600;`;\r\nconst textCenter = css`text-align: center;`;\r\nconst tableCSS = css`\r\n    font-family: arial, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n`;\r\nconst flag = css`\r\n    width: 40px;\r\n    height: 25px;\r\n`;\r\nexport default ({countriesData, selection}) => (\r\n    <table css={tableCSS}>\r\n        <thead>\r\n            <tr>\r\n                <TH css={textCenter}>{selection}</TH>\r\n                <TH css={textCenter}><img css={flag} src={countriesData[selection].countryInfo.flag} /></TH>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <TD>Cases Today</TD>\r\n                <TD>{countriesData[selection].todayCases}</TD>\r\n            </tr>\r\n            <tr css={bgGrey}>\r\n                <TD>Deaths Today</TD>\r\n                <TD>{countriesData[selection].todayDeaths}</TD>\r\n            </tr>\r\n            <tr>\r\n                <TD>Recovered</TD>\r\n                <TD>{countriesData[selection].recovered}</TD>\r\n            </tr>\r\n            <tr css={bgGrey}>\r\n                <TD>Active</TD>\r\n                <TD>{countriesData[selection].active}</TD>\r\n            </tr>\r\n            <tr>\r\n                <TD>Total Deaths</TD>\r\n                <TD>{countriesData[selection].deaths}</TD>\r\n            </tr>\r\n            <tr css={[bgGrey, bold]}>\r\n                <TD>Total Cases</TD>\r\n                <TD>{countriesData[selection].cases}</TD>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n);","export const getGraphData = (resp) => {\r\n    let cases = [], deaths = [], recovered = [];\r\n    Object.entries(resp.cases).forEach((key, i) => {\r\n        cases.push([i, key[1]]);\r\n    });\r\n    Object.entries(resp.deaths).forEach((key, i) => {\r\n        deaths.push([i, key[1]]);\r\n    });\r\n    Object.entries(resp.recovered).forEach((key, i) => {\r\n        recovered.push([i, key[1]]);\r\n    });\r\n    return [\r\n        {\r\n            label: 'Cases',\r\n            data: cases\r\n        },\r\n        {\r\n            label: 'Recovered',\r\n            data: recovered\r\n        },\r\n        {\r\n            label: 'Deaths',\r\n            data: deaths\r\n        }\r\n    ];\r\n}","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport Loader from '../commons/loader';\r\nimport CountryTable from './countryTable';\r\nimport { Chart } from 'react-charts';\r\nimport PieChart from 'react-minimal-pie-chart';\r\nimport { getGraphData } from './service';\r\n\r\nconst p4 = css`padding: 4%;`;\r\nconst marginAuto = css`margin: 0 auto;`;\r\nconst container = css`\r\n    padding: 20px 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\nconst chartContainer = css`\r\n    height: 250px;\r\n    width: 400px;\r\n`;\r\nconst pieContainer = css`\r\n    height: 250px;\r\n    width: 250px;\r\n    margin: 0 auto;\r\n`;\r\nconst customStyles = {\r\n    container: (provided) => ({\r\n        ...provided,\r\n        width: '150px'\r\n    }),\r\n    option: (provided) => ({\r\n      ...provided,\r\n      textAlign: 'left',\r\n    })\r\n};\r\n\r\n\r\nexport default () => {\r\n    const [selectedOption, setSelectedOption] = useState({\r\n        value: 'India',\r\n        label: 'India'\r\n    });\r\n    const [countryOptions, setCountryOptions] = useState({});\r\n    const [countriesData, setCountriesData] = useState({});\r\n    const [historicalData, setHistoricalData] = useState({});\r\n    const series = React.useMemo(() => ({ showPoints: false }), []);\r\n    const axes = React.useMemo(\r\n        () => [\r\n            { primary: true, type: 'linear', position: 'bottom' },\r\n            { type: 'linear', position: 'left' }\r\n        ],[]\r\n    )\r\n\r\n    const getHistoricalData = async (country) => {\r\n        const resp = await fetch(`https://corona.lmao.ninja/historical/${country}`);\r\n        const response = await resp.json();\r\n        const historyData = getGraphData(response.timeline);\r\n        setHistoricalData(historyData);\r\n    };\r\n\r\n    const handleChange = (selectedOption) => {\r\n        setSelectedOption(selectedOption);\r\n        getHistoricalData(selectedOption.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function getCountries() {\r\n            const resp = await fetch('https://corona.lmao.ninja/countries');\r\n            const response = await resp.json();\r\n            const countryData = {};\r\n            response.forEach(key => { countryData[key.country]= key; });\r\n            setCountriesData(countryData);\r\n            const countries = response.map((key)=>({\r\n                value: key.country,\r\n                label: key.country\r\n            }));\r\n            setCountryOptions(countries);\r\n            getHistoricalData(selectedOption.value);\r\n        }\r\n        getCountries()\r\n    }, []);\r\n\r\n    return (\r\n        <div css={container}>\r\n            {Object.keys(countriesData).length\r\n                ? (\r\n                    <React.Fragment>\r\n                        <div css={marginAuto}>\r\n                            <Select\r\n                                styles={customStyles}\r\n                                value={selectedOption}\r\n                                onChange={handleChange}\r\n                                options={countryOptions}\r\n                            />\r\n                        </div>\r\n                        <div css={p4}>\r\n                            <CountryTable countriesData={countriesData} selection={selectedOption.value} />\r\n                        </div>\r\n                        <div css={p4}>\r\n                            {historicalData.length\r\n                                ? (\r\n                                    <div css={chartContainer}>\r\n                                        <Chart\r\n                                            data={historicalData}\r\n                                            series={series}\r\n                                            axes={axes}\r\n                                            tooltip\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                                : <loader />}\r\n                        </div>\r\n                        <div css={p4}>\r\n                            <div css={pieContainer}>\r\n                                <PieChart\r\n                                    label={true}\r\n                                    labelStyle={{fill:'white', fontSize: '5px'}}\r\n                                    labelPosition={80}\r\n                                    animate={true}\r\n                                    background={'grey'}\r\n                                    animationDuration={500}\r\n                                    data={[\r\n                                        { title: 'Active', value: countriesData[selectedOption.value].active, color: '#E38627' },\r\n                                        { title: 'Recovered', value: countriesData[selectedOption.value].recovered, color: '#C13C37' },\r\n                                        { title: 'Total', value: countriesData[selectedOption.value].cases, color: '#6A2135' },\r\n                                    ]}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </React.Fragment>\r\n                )\r\n                : <Loader/>}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport Header from './components/header';\nimport Overview from './components/overview';\nimport CountryView from './components/countryView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Overview />\n      <CountryView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}