{"version":3,"sources":["components/header/index.js","components/commons/loader/index.js","components/overview/index.js","components/countryView/index.js","App.js","serviceWorker.js","index.js"],"names":["headerCSS","css","spin","keyframes","loaderCSS","container","item","useState","overview","setOverview","useEffect","a","fetch","resp","json","response","getOverview","cases","Fragment","deaths","recovered","TH","styled","td","TD","bgGrey","bold","p4","marginAuto","textCenter","tableCSS","flag","customStyles","provided","width","option","textAlign","value","label","selectedOption","setSelectedOption","countryOptions","setCountryOptions","countriesData","setCountriesData","countryData","forEach","key","country","countries","map","getCountries","Object","keys","length","styles","onChange","options","src","countryInfo","todayCases","todayDeaths","active","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2674b892.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport '../../App.css';\r\n\r\nconst headerCSS = css`\r\n    background-color: #282c34;\r\n    color: #61dafb;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 18px;\r\n    padding: 5px 10px;\r\n`;\r\n\r\nexport default () => {\r\n  return (<header css={headerCSS}> Corona Dashboard </header>);\r\n};\r\n","/** @jsx jsx */\r\nimport { jsx, css, keyframes } from '@emotion/core'\r\n\r\nconst spin = keyframes`\r\n    from, 0%, to { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n`\r\nconst loaderCSS = css`\r\n    border: 8px solid #f3f3f3;\r\n    border-radius: 50%;\r\n    border-top: 8px solid #3498db;\r\n    width: 30px;\r\n    height: 30px;\r\n    -webkit-animation: ${spin} 1s linear infinite;\r\n    animation: ${spin} 1s linear infinite;\r\n    margin: 0 auto;\r\n`;\r\n\r\n\r\nexport default () => (<div css={loaderCSS}></div>)","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport React, { useState, useEffect } from 'react';\r\nimport Loader from '../commons/loader';\r\n\r\nconst container = css`\r\n    padding: 20px 30px;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst item = css`\r\n    background: grey;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 5%;\r\n    font-size: 14px;\r\n    margin: 2%;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n`;\r\n\r\nexport default () => {\r\n    const [overview, setOverview] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function getOverview() {\r\n            const resp = await fetch('https://corona.lmao.ninja/all');\r\n            const response = await resp.json();\r\n            setOverview(response);\r\n        }\r\n        getOverview()\r\n      }, []);\r\n\r\n    return (\r\n        <div css={container}>\r\n            <div css={item}>\r\n                {overview && overview.cases\r\n                    ? (<React.Fragment>\r\n                            <div>Confirmed</div> \r\n                            <div>{overview.cases}</div>\r\n                        </React.Fragment>)\r\n                    : <Loader />}\r\n            </div>\r\n            <div css={item}>\r\n                {overview && overview.deaths\r\n                    ? (<React.Fragment>\r\n                            <div>Deaths</div> \r\n                            <div>{overview.deaths}</div>\r\n                        </React.Fragment>)\r\n                    : <Loader />}\r\n            </div>\r\n            <div css={item}>\r\n                {overview && overview.recovered\r\n                    ? (<React.Fragment>\r\n                            <div>Recovered</div> \r\n                            <div>{overview.recovered}</div>\r\n                        </React.Fragment>)\r\n                    : <Loader />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport styled from '@emotion/styled'\r\nimport React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport Loader from '../commons/loader';\r\n\r\nconst TH = styled.td`\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n`;\r\nconst TD = styled.td`\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n`;\r\nconst bgGrey = css`background-color: #dddddd;`;\r\nconst bold = css`font-weight: 600;`;\r\nconst p4 = css`padding: 4%;`;\r\nconst marginAuto = css`margin: 0 auto;`;\r\nconst textCenter = css`text-align: center;`;\r\nconst container = css`\r\n    padding: 20px 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\nconst tableCSS = css`\r\n    font-family: arial, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 100%;\r\n`;\r\nconst flag = css`\r\n    width: 40px;\r\n    height: 25px;\r\n`;\r\n\r\nconst customStyles = {\r\n    container: (provided) => ({\r\n        ...provided,\r\n        width: '150px'\r\n    }),\r\n    option: (provided) => ({\r\n      ...provided,\r\n      textAlign: 'left',\r\n    })\r\n  }\r\n\r\nexport default () => {\r\n    const [selectedOption, setSelectedOption] = useState({\r\n        value: 'India',\r\n        label: 'India'\r\n    });\r\n    const [countryOptions, setCountryOptions] = useState({});\r\n    const [countriesData, setCountriesData] = useState({});\r\n\r\n    const handleChange = (selectedOption) => {\r\n        setSelectedOption(selectedOption);\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function getCountries() {\r\n            const resp = await fetch('https://corona.lmao.ninja/countries');\r\n            const response = await resp.json();\r\n            const countryData = {};\r\n            response.forEach(key => { countryData[key.country]= key; });\r\n            setCountriesData(countryData);\r\n            const countries = response.map((key)=>({\r\n                value: key.country,\r\n                label: key.country\r\n            }));\r\n            setCountryOptions(countries);\r\n        }\r\n        getCountries()\r\n    }, []);\r\n\r\n    return (\r\n        <div css={container}>\r\n            {Object.keys(countriesData).length\r\n                ? (\r\n                    <React.Fragment>\r\n                        <div css={marginAuto}>\r\n                            <Select\r\n                                styles={customStyles}\r\n                                value={selectedOption}\r\n                                onChange={handleChange}\r\n                                options={countryOptions}\r\n                            />\r\n                        </div>\r\n                        <div css={p4}>\r\n                            <table css={tableCSS}>\r\n                                <tr>\r\n                                    <TH css={textCenter}>{selectedOption.value}</TH>\r\n                                    <TH css={textCenter}><img css={flag} src={countriesData[selectedOption.value].countryInfo.flag} /></TH>\r\n                                </tr>\r\n                                <tr>\r\n                                    <TD>Cases Today</TD>\r\n                                    <TD>{countriesData[selectedOption.value].todayCases}</TD>\r\n                                </tr>\r\n                                <tr css={bgGrey}>\r\n                                    <TD>Deaths Today</TD>\r\n                                    <TD>{countriesData[selectedOption.value].todayDeaths}</TD>\r\n                                </tr>\r\n                                <tr>\r\n                                    <TD>Recovered</TD>\r\n                                    <TD>{countriesData[selectedOption.value].recovered}</TD>\r\n                                </tr>\r\n                                <tr css={bgGrey}>\r\n                                    <TD>Active</TD>\r\n                                    <TD>{countriesData[selectedOption.value].active}</TD>\r\n                                </tr>\r\n                                <tr>\r\n                                    <TD>Total Deaths</TD>\r\n                                    <TD>{countriesData[selectedOption.value].deaths}</TD>\r\n                                </tr>\r\n                                <tr css={[bgGrey, bold]}>\r\n                                    <TD>Total Cases</TD>\r\n                                    <TD>{countriesData[selectedOption.value].cases}</TD>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                    </React.Fragment>\r\n                )\r\n                : <Loader/>}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport Header from './components/header';\nimport Overview from './components/overview';\nimport CountryView from './components/countryView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Overview />\n      <CountryView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}