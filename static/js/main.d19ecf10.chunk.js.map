{"version":3,"sources":["components/header/index.js","components/overview/index.js","components/countryView/index.js","App.js","serviceWorker.js","index.js"],"names":["headerCSS","css","container","item","useState","overview","setOverview","useEffect","a","fetch","resp","json","response","getOverview","cases","deaths","recovered","customStyles","provided","width","option","textAlign","value","label","selectedOption","setSelectedOption","countryOptions","setCountryOptions","countriesData","setCountriesData","countries","map","key","country","getCountries","styles","onChange","options","length","filter","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2fAIA,IAAMA,EAAYC,YAAH,KAUA,aACb,OAAQ,sBAAQA,IAAKD,GAAb,uB,uZCXV,IAAME,EAAYD,YAAH,KAOTE,EAAOF,YAAH,KAUK,aAAO,IAAD,EACeG,mBAAS,IADxB,mBACVC,EADU,KACAC,EADA,KAYjB,OATAC,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,sEACuBC,MAAM,iCAD7B,cACUC,EADV,gBAE2BA,EAAKC,OAFhC,OAEUC,EAFV,OAGIN,EAAYM,GAHhB,4CADY,uBAAC,WAAD,wBAMZC,KACC,IAGD,mBAAKZ,IAAKC,GACN,mBAAKD,IAAKE,GAAV,cAEKE,GAAYA,EAASS,MACf,wBAAOT,EAASS,OACjB,MAEV,mBAAKb,IAAKE,GAAV,WAEKE,GAAYA,EAASU,OACf,wBAAOV,EAASU,QACjB,MAEV,mBAAKd,IAAKE,GAAV,cAEKE,GAAYA,EAASW,UACf,wBAAOX,EAASW,WACjB,Q,iKC9CtB,IAAMd,EAAYD,YAAH,KAMTgB,EAAe,CACjBf,UAAW,SAACgB,GAAD,sBACJA,EADI,CAEPC,MAAO,WAEXC,OAAQ,SAACF,GAAD,sBACHA,EADG,CAENG,UAAW,WAIF,aAAO,IAAD,EAC2BjB,mBAAS,CACjDkB,MAAO,QACPC,MAAO,UAHM,mBACVC,EADU,KACMC,EADN,OAK2BrB,mBAAS,IALpC,mBAKVsB,EALU,KAKMC,EALN,OAMyBvB,mBAAS,IANlC,mBAMVwB,EANU,KAMKC,EANL,KA0BjB,OAdAtB,qBAAU,WAAM,4CACZ,gCAAAC,EAAA,sEACuBC,MAAM,uCAD7B,cACUC,EADV,gBAE2BA,EAAKC,OAFhC,OAEUC,EAFV,OAGIiB,EAAiBjB,GACXkB,EAAYlB,EAASmB,KAAI,SAACC,GAAO,MAAO,CAC1CV,MAAOU,EAAIC,QACXV,MAAOS,EAAIC,YAEfN,EAAkBG,GARtB,4CADY,uBAAC,WAAD,wBAWZI,KACD,IAGC,mBAAKjC,IAAKC,GACN,uBACI,YAAC,IAAD,CACIiC,OAAQlB,EACRK,MAAOE,EACPY,SAxBK,SAACZ,GAClBC,EAAkBD,IAwBNa,QAASX,KAGjB,uBACKE,GAAiBA,EAAcU,OAExB,gCAEKV,EAAcW,QAAO,SAACP,GAAD,OAAQA,EAAIC,UAAUT,EAAeF,SAAQ,GAAGR,OAG5E,QCnDP0B,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d19ecf10.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport '../../App.css';\r\n\r\nconst headerCSS = css`\r\n    background-color: #282c34;\r\n    color: #61dafb;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 18px;\r\n    padding: 5px 10px;\r\n`;\r\n\r\nexport default () => {\r\n  return (<header css={headerCSS}> Corona Dashboard </header>);\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst container = css`\r\n    padding: 20px 30px;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst item = css`\r\n    background: grey;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 5%;\r\n    font-size: 14px;\r\n    margin: 2%;\r\n    width: 100%;\r\n`;\r\n\r\nexport default () => {\r\n    const [overview, setOverview] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function getOverview() {\r\n            const resp = await fetch('https://corona.lmao.ninja/all');\r\n            const response = await resp.json();\r\n            setOverview(response);\r\n        }\r\n        getOverview()\r\n      }, []);\r\n\r\n    return (\r\n        <div css={container}>\r\n            <div css={item}>\r\n                Confirmed :\r\n                {overview && overview.cases\r\n                    ? (<span>{overview.cases}</span>)\r\n                    : null}\r\n            </div>\r\n            <div css={item}>\r\n                Deaths :\r\n                {overview && overview.deaths\r\n                    ? (<span>{overview.deaths}</span>)\r\n                    : null}\r\n            </div>\r\n            <div css={item}>\r\n                Recovered :\r\n                {overview && overview.recovered\r\n                    ? (<span>{overview.recovered}</span>)\r\n                    : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core'\r\nimport { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\n\r\nconst container = css`\r\n    padding: 20px 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst customStyles = {\r\n    container: (provided) => ({\r\n        ...provided,\r\n        width: '150px'\r\n    }),\r\n    option: (provided) => ({\r\n      ...provided,\r\n      textAlign: 'left',\r\n    })\r\n  }\r\n\r\nexport default () => {\r\n    const [selectedOption, setSelectedOption] = useState({\r\n        value: 'India',\r\n        label: 'India'\r\n    });\r\n    const [countryOptions, setCountryOptions] = useState({});\r\n    const [countriesData, setCountriesData] = useState({});\r\n\r\n    const handleChange = (selectedOption) => {\r\n        setSelectedOption(selectedOption);\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function getCountries() {\r\n            const resp = await fetch('https://corona.lmao.ninja/countries');\r\n            const response = await resp.json();\r\n            setCountriesData(response);\r\n            const countries = response.map((key)=>{return {\r\n                value: key.country,\r\n                label: key.country\r\n            }});\r\n            setCountryOptions(countries);\r\n        }\r\n        getCountries()\r\n    }, []);\r\n\r\n    return (\r\n        <div css={container}>\r\n            <div>\r\n                <Select\r\n                    styles={customStyles}\r\n                    value={selectedOption}\r\n                    onChange={handleChange}\r\n                    options={countryOptions}\r\n                />\r\n            </div>\r\n            <div>\r\n                {countriesData && countriesData.length\r\n                    ? (\r\n                        <div>\r\n                            Cases:\r\n                            {countriesData.filter((key)=>(key.country===selectedOption.value))[0].cases}\r\n                        </div>\r\n                    )\r\n                    : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport Header from './components/header';\nimport Overview from './components/overview';\nimport CountryView from './components/countryView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Overview />\n      <CountryView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}